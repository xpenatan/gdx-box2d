interface b2DestructionListener {
};

enum b2DrawFlag {
    "b2Draw::e_shapeBit",
    "b2Draw::e_jointBit",
    "b2Draw::e_aabbBit",
    "b2Draw::e_pairBit",
    "b2Draw::e_centerOfMassBit"
};

interface b2Draw {
    void SetFlags(unsigned long flags);
    unsigned long GetFlags();
    void AppendFlags(unsigned long flags);
    void ClearFlags(unsigned long flags);
};

interface b2World {
    void b2World([Const, Ref] b2Vec2 gravity);
    void SetDestructionListener(b2DestructionListener listener);
    void SetContactFilter(b2ContactFilter filter);
    void SetContactListener(b2ContactListener listener);
    void SetDebugDraw(b2Draw debugDraw);
    b2Body CreateBody([Const] b2BodyDef def);
    void DestroyBody(b2Body body);
    b2Joint CreateJoint([Const] b2JointDef def);
    void DestroyJoint(b2Joint joint);
    void Step(float timeStep, long velocityIterations, long positionIterations);
    void ClearForces();
//    void DrawDebugData();
    void QueryAABB(b2QueryCallback callback, [Ref] b2AABB aabb);
    void RayCast(b2RayCastCallback callback, [Ref] b2Vec2 point1, [Ref] b2Vec2 point2);
    b2Body GetBodyList();
    b2Joint GetJointList();
    b2Contact GetContactList();
    void SetAllowSleeping(boolean flag);
    boolean GetAllowSleeping();
    void SetWarmStarting(boolean flag);
    boolean GetWarmStarting();
    void SetContinuousPhysics(boolean flag);
    boolean GetContinuousPhysics();
    void SetSubStepping(boolean flag);
    boolean GetSubStepping();
    long GetProxyCount();
    long GetBodyCount();
    long GetJointCount();
    long GetContactCount();
    long GetTreeHeight();
    long GetTreeBalance();
    float GetTreeQuality();
    void SetGravity([Ref] b2Vec2 gravity);
    [Value] b2Vec2 GetGravity();
    boolean IsLocked();
    void SetAutoClearForces(boolean flag);
    boolean GetAutoClearForces();
//    [Const, Ref] b2Profile GetProfile();
    void Dump();
};

interface b2MassData {
    void b2MassData();
    attribute float mass;
    [Value] attribute b2Vec2 center;
    attribute float I;
};

interface b2Vec2 {
    attribute float x;
    attribute float y;
    void b2Vec2();
    void b2Vec2(float x, float y);
    void SetZero();
    void Set(float x, float y);
    float Length();
    float LengthSquared();
    float Normalize();
    boolean IsValid();
};

interface b2BodyDef {
    void b2BodyDef();
//    attribute b2BodyType type;
    [Value]attribute b2Vec2 position;
    attribute float angle;
    [Value]attribute b2Vec2 linearVelocity;
    attribute float angularVelocity;
    attribute float linearDamping;
    attribute float angularDamping;
    attribute boolean allowSleep;
    attribute boolean awake;
    attribute boolean fixedRotation;
    attribute boolean bullet;
//    attribute boolean active;
    attribute float gravityScale;
};
//
[NoDelete]
interface b2Body {
    b2Fixture CreateFixture(b2FixtureDef def);
    b2Fixture CreateFixture(b2Shape shape, float density);
    void DestroyFixture(b2Fixture fixture);
    void SetTransform([Ref] b2Vec2 position, float angle);
    [Const, Ref] b2Transform GetTransform();
    [Const, Ref] b2Vec2 GetPosition();
    float GetAngle();
    [Const, Ref] b2Vec2 GetWorldCenter();
    [Const, Ref] b2Vec2 GetLocalCenter();
    void SetLinearVelocity([Ref] b2Vec2 v);
    [Value] b2Vec2 GetLinearVelocity();
    void SetAngularVelocity(float omega);
    float GetAngularVelocity();
    void ApplyForce([Ref] b2Vec2 force, [Ref] b2Vec2 point, boolean awake);
    void ApplyForceToCenter([Ref] b2Vec2 force, boolean awake);
    void ApplyTorque(float torque, boolean awake);
    void ApplyLinearImpulse([Ref] b2Vec2 impulse, [Ref] b2Vec2 point, boolean awake);
    void ApplyAngularImpulse(float impulse, boolean awake);
    float GetMass();
    float GetInertia();
    void GetMassData(b2MassData data);
    void SetMassData(b2MassData data);
    void ResetMassData();
    [Value] b2Vec2 GetWorldPoint([Ref] b2Vec2 localPoint);
    [Value] b2Vec2 GetWorldVector([Ref] b2Vec2 localVector);
    [Value] b2Vec2 GetLocalPoint([Ref] b2Vec2 worldPoint);
    [Value] b2Vec2 GetLocalVector([Ref] b2Vec2 worldVector);
    [Value] b2Vec2 GetLinearVelocityFromWorldPoint([Ref] b2Vec2 worldPoint);
    [Value] b2Vec2 GetLinearVelocityFromLocalPoint([Ref] b2Vec2 localPoint);
    float GetLinearDamping();
    void SetLinearDamping(float linearDamping);
    float GetAngularDamping();
    void SetAngularDamping(float angularDamping);
    float GetGravityScale();
    void SetGravityScale(float scale);
//    void SetType(b2BodyType type);
//    b2BodyType GetType();
    void SetBullet(boolean flag);
    boolean IsBullet();
    void SetSleepingAllowed(boolean flag);
    boolean IsSleepingAllowed();
    void SetAwake(boolean flag);
    boolean IsAwake();
//    void SetActive(boolean flag);
//    boolean IsActive();
    void SetFixedRotation(boolean flag);
    boolean IsFixedRotation();
    b2Fixture GetFixtureList();
    b2JointEdge GetJointList();
    b2ContactEdge GetContactList();
    b2Body GetNext();
//    any GetUserData();
//    void SetUserData(any data);
    b2World GetWorld();
    void Dump();
};

interface b2Transform {
    void b2Transform();
    void b2Transform([Ref] b2Vec2 position, [Ref] b2Rot rotation);
    void SetIdentity();
    void Set([Ref] b2Vec2 position, float angle);
    [Value] attribute b2Vec2 p;
    [Value] attribute b2Rot q;
};

interface b2Rot {
    void b2Rot();
    void b2Rot(float angle);
    void Set(float angle);
    void SetIdentity();
    float GetAngle();
    [Value] b2Vec2 GetXAxis();
    [Value] b2Vec2 GetYAxis();
    attribute float s;
    attribute float c;
};

enum b2BodyType {
    "b2_staticBody",
    "b2_kinematicBody",
    "b2_dynamicBody"
};

enum b2ShapeType {
    "b2Shape::e_circle",
    "b2Shape::e_edge",
    "b2Shape::e_polygon",
    "b2Shape::e_chain",
    "b2Shape::e_typeCount"
};

interface b2Shape {
//    b2ShapeType GetType();
    long GetChildCount();
    boolean TestPoint([Ref] b2Transform xf, [Ref] b2Vec2 p);
    boolean RayCast(b2RayCastOutput output, [Ref] b2RayCastInput input,
                  [Ref] b2Transform transform, long childIndex);
    void ComputeAABB(b2AABB aabb, [Ref] b2Transform xf, long childIndex);
    void ComputeMass(b2MassData massData, float density);

//    attribute b2ShapeType m_type;
    attribute float m_radius;
};

interface b2PolygonShape {
    void b2PolygonShape();
//    void Set(b2Vec2 vertices, long vertexCount);
//    void SetAsBox(float hx, float hy);
//    void SetAsBox(float hx, float hy, [Ref] b2Vec2 center, float angle);
//    long GetVertexCount();
//    [Const, Ref] b2Vec2 GetVertex(long index);
//    [Value] attribute b2Vec2 m_centroid;

  // TODO: webidl_binder support for array types.
  // [Value] attribute b2Vec2[] m_vertices;
  // [Value] attribute b2Vec2[] m_normals;

    attribute long m_count;
};
b2PolygonShape implements b2Shape;

interface b2EdgeShape {
    void b2EdgeShape();
//    void Set([Ref] b2Vec2 v1, [Ref] b2Vec2 v2);
//
//    [Value] attribute b2Vec2 m_vertex1;
//    [Value] attribute b2Vec2 m_vertex2;
//    [Value] attribute b2Vec2 m_vertex0;
//    [Value] attribute b2Vec2 m_vertex3;
//    attribute boolean m_hasVertex0;
//    attribute boolean m_hasVertex3;
};
b2EdgeShape implements b2Shape;

interface b2CircleShape {
    void b2CircleShape();
    [Value] attribute b2Vec2 m_p;
};
b2CircleShape implements b2Shape;

interface b2ChainShape {
    void b2ChainShape();
    void Clear();
//    void CreateLoop(b2Vec2 vertices, long count);
//    void CreateChain(b2Vec2 vertices, long count);
//    void SetPrevVertex([Ref] b2Vec2 prevVertex);
//    void SetNextVertex([Ref] b2Vec2 nextVertex);
//    void GetChildEdge(b2EdgeShape edge, long index);
//    long GetVertexCount();
//    [Const, Ref] b2Vec2 GetVertex(long index);

//    attribute b2Vec2 m_vertices;
//    attribute long m_count;
//    [Value] attribute b2Vec2 m_prevVertex;
//    [Value] attribute b2Vec2 m_nextVertex;
//    attribute boolean m_hasPrevVertex;
//    attribute boolean m_hasNextVertex;
};
b2ChainShape implements b2Shape;

interface b2FixtureDef {
    void b2FixtureDef();
    [Const] attribute b2Shape shape;
//    attribute any userData;
    attribute float friction;
    attribute float restitution;
    attribute float density;
    attribute boolean isSensor;
    [Value] attribute b2Filter filter;
};

interface b2Filter {
    void b2Filter();
    attribute unsigned short categoryBits;
    attribute unsigned short maskBits;
    attribute short groupIndex;
};

interface b2Fixture {
//    b2ShapeType GetType();
    b2Shape GetShape();
    void SetSensor(boolean sensor);
    boolean IsSensor();
    void SetFilterData([Ref] b2Filter filter);
    [Const, Ref] b2Filter GetFilterData();
    void Refilter();
    b2Body GetBody();
    b2Fixture GetNext();
//    any GetUserData();
//    void SetUserData(any data);
    boolean TestPoint([Ref] b2Vec2 p);
    boolean RayCast(b2RayCastOutput output, [Ref] b2RayCastInput input, long childIndex);
    void GetMassData(b2MassData massData);
    void SetDensity(float density);
    float GetDensity();
    float GetFriction();
    void SetFriction(float friction);
    float GetRestitution();
    void SetRestitution(float restitution);
    [Const, Ref] b2AABB GetAABB(long childIndex);
    void Dump(long bodyIndex);
};

interface b2AABB {
    void b2AABB();
    boolean IsValid();
    [Value] b2Vec2 GetCenter();
    [Value] b2Vec2 GetExtents();
    float GetPerimeter();
    void Combine([Ref] b2AABB aabb);
    void Combine([Ref] b2AABB aabb1, [Ref] b2AABB aabb2);
    boolean Contains([Ref] b2AABB aabb);
    boolean RayCast(b2RayCastOutput output, [Ref] b2RayCastInput input);
    [Value] attribute b2Vec2 lowerBound;
    [Value] attribute b2Vec2 upperBound;
};

interface b2RayCastInput {
    [Value] attribute b2Vec2 p1;
    [Value] attribute b2Vec2 p2;
    attribute float maxFraction;
};

interface b2RayCastOutput {
    [Value] attribute b2Vec2 normal;
    attribute float fraction;
};

interface b2ContactEdge {
    void b2ContactEdge();
    attribute b2Body other;
    attribute b2Contact contact;
    attribute b2ContactEdge prev;
    attribute b2ContactEdge next;
};

interface b2JointEdge {
    void b2JointEdge();
    attribute b2Body other;
    attribute b2Joint joint;
    attribute b2JointEdge prev;
    attribute b2JointEdge next;
};

enum b2JointType {
    "e_unknownJoint",
    "e_revoluteJoint",
    "e_prismaticJoint",
    "e_distanceJoint",
    "e_pulleyJoint",
    "e_mouseJoint",
    "e_gearJoint",
    "e_wheelJoint",
    "e_weldJoint",
    "e_frictionJoint",
    "e_ropeJoint",
    "e_motorJoint"
};

interface b2JointDef {
    void b2JointDef();
//    attribute b2JointType type;
    attribute b2Body bodyA;
    attribute b2Body bodyB;
    attribute boolean collideConnected;
};

[NoDelete]
interface b2Joint {
//    b2JointType GetType();
    b2Body GetBodyA();
    b2Body GetBodyB();
    [Value] b2Vec2 GetAnchorA();
    [Value] b2Vec2 GetAnchorB();
    [Value] b2Vec2 GetReactionForce(float inv_dt);
    float GetReactionTorque(float inv_dt);
    b2Joint GetNext();
//    any GetUserData();
//    void SetUserData(any data);
//    boolean IsActive();
    boolean GetCollideConnected();
    void Dump();
};

interface b2PulleyJoint {
    [Value] b2Vec2 GetGroundAnchorA();
    [Value] b2Vec2 GetGroundAnchorB();
    float GetLengthA();
    float GetLengthB();
    float GetRatio();
    float GetCurrentLengthA();
    float GetCurrentLengthB();
};
b2PulleyJoint implements b2Joint;

interface b2MouseJoint {
  void SetTarget([Ref] b2Vec2 target);
  [Const, Ref] b2Vec2 GetTarget();
  void SetMaxForce(float force);
  float GetMaxForce();
//  void SetFrequency(float hz);
//  float GetFrequency();
//  void SetDampingRatio(float ratio);
//  float GetDampingRatio();
};
b2MouseJoint implements b2Joint;

interface b2MouseJointDef {
  void b2MouseJointDef();
  [Value] attribute b2Vec2 target;
//  attribute float maxForce;
//  attribute float frequencyHz;
//  attribute float dampingRatio;
};
b2MouseJointDef implements b2JointDef;

[NoDelete]
interface b2Contact {
    b2Manifold GetManifold();
    void GetWorldManifold(b2WorldManifold manifold);
    boolean IsTouching();
    void SetEnabled(boolean flag);
    boolean IsEnabled();
    b2Contact GetNext();
    b2Fixture GetFixtureA();
    long GetChildIndexA();
    b2Fixture GetFixtureB();
    long GetChildIndexB();
    void SetFriction(float friction);
    float GetFriction();
    void ResetFriction();
    void SetRestitution(float restitution);
    float GetRestitution();
    void ResetRestitution();
    void SetTangentSpeed(float speed);
    float GetTangentSpeed();
};

enum b2ManifoldType {
    "b2Manifold::e_circles",
    "b2Manifold::e_faceA",
    "b2Manifold::e_faceB"
};

interface b2Manifold {
    void b2Manifold();
//    // TODO: webidl_binder support for array types.
//    // [Value] attribute b2ManifoldPoint[] points;
    [Value] attribute b2Vec2 localNormal;
    [Value] attribute b2Vec2 localPoint;
//    attribute b2ManifoldType type;
    attribute long pointCount;
};

interface b2WorldManifold {
    void b2WorldManifold();
    void Initialize(b2Manifold manifold, [Ref] b2Transform xfA, float radiusA, [Ref] b2Transform xfB, float radiusB);
    [Value] attribute b2Vec2 normal;
//    [Value] attribute b2Vec2[] points;
//    attribute float[] separations;
};

interface b2QueryCallback {
};

[JSImplementation="b2QueryCallback"]
interface JSQueryCallback {
    void JSQueryCallback();
    boolean ReportFixture(b2Fixture fixture);
};

interface b2ContactFilter {
};

[JSImplementation="b2ContactFilter"]
interface JSContactFilter {
    void JSContactFilter();
    boolean ShouldCollide(b2Fixture fixtureA, b2Fixture fixtureB);
};

interface b2ContactListener {
};

[JSImplementation="b2ContactListener"]
interface JSContactListener {
    void JSContactListener();

    void BeginContact(b2Contact contact);
    void EndContact(b2Contact contact);
    // TODO: Declare another b2ContactListener implementation without PreSolve/PostSolve,
    // for efficiency (otherwise the JS implementations of these functions must get called
    // even if unused).
//    void PreSolve(b2Contact contact, [Const] b2Manifold oldManifold);
//    void PostSolve(b2Contact contact, [Const] b2ContactImpulse impulse);
};

interface b2RayCastCallback {
};

[JSImplementation="b2RayCastCallback"]
interface JSRayCastCallback {
    void JSRayCastCallback();
    float ReportFixture(b2Fixture fixture, [Const, Ref] b2Vec2 point,
                      [Const, Ref] b2Vec2 normal, float fraction);
};

interface b2ContactImpulse {
    // TODO: webidl_binder support for array types.
    // attribute float[] normalImpulses;
    // attribute float[] tangentImpulses;
    attribute long count;
};